{"version":3,"sources":["components/H1.js","components/Checkbox.js","components/Button.js","components/TimeBox.js","components/Clock.js","components/Toggle.js","App.js","serviceWorker.js","index.js"],"names":["H1","Component","react_default","a","createElement","this","props","text","Button","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","name","saveName","bind","assertThisInitialized","refs","value","alert","entered_val","setState","concat","console","log","type","ref","className","onClick","TimeBox","time","Clock","Date","_this2","setInterval","clearInterval","timeID","toLocaleDateString","toLocaleTimeString","components_TimeBox","Toggle","isToggleOn","msg","handleClick","nextProps","nextState","x","React","App","components_H1","components_Clock","components_Toggle","components_Button","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAaeA,SCXQC,6LDEf,OACIC,EAAAC,EAAAC,cAAA,UACIC,KAAKC,MAAMC,aAJVN,qBEwCFO,cAvCV,SAAAA,EAAYF,GAAO,IAAAG,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAL,KAAAG,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAL,KAAAK,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAT,KAAMC,KACDS,MAAQ,CAETC,KAAM,IAIVP,EAAKQ,SAAWR,EAAKQ,SAASC,KAAdR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KARDA,0EAahB,GAA2B,IAAxBJ,KAAKe,KAAKJ,KAAKK,MAEdC,MAAM,8BAGV,CACI,IAAIC,EAAclB,KAAKe,KAAKJ,KAAKK,MACjChB,KAAKmB,SAAS,SAAAT,GAAK,MAAI,CACnBC,KAAMD,EAAMC,KAAKS,OAAOF,MAE5BG,QAAQC,IAAIJ,qCAKhB,OACQrB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOwB,KAAK,OAAOC,IAAI,OAAOC,UAAU,wBACxC5B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQ0B,UAAY,kBAAkBC,QAAS1B,KAAKY,UAApD,IAAiEZ,KAAKC,MAAMe,MAA5E,KACAnB,EAAAC,EAAAC,cAAA,0BAAkBC,KAAKU,MAAMC,cAlC5Bf,aCUN+B,mLARP,OACI9B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,WAAf,UACWzB,KAAKC,MAAM2B,aAJZhC,aCyCPiC,cAtCX,SAAAA,EAAY5B,GACZ,IAAAG,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAL,KAAA6B,IACIzB,EAAAC,OAAAE,EAAA,EAAAF,CAAAL,KAAAK,OAAAG,EAAA,EAAAH,CAAAwB,GAAApB,KAAAT,KAAMC,KACDS,MAAQ,CAACkB,KAAO,IAAIE,MAF7B1B,mFAOA,IAAA2B,EAAA/B,KACIgC,YAAY,kBAAMD,EAAKZ,SAAS,CAC7BS,KAAM,IAAIE,QACV,oDAKHG,cAAcjC,KAAKkC,yEAQnB,OACIrC,EAAAC,EAAAC,cAAA,WACIC,KAAKC,MAAM2B,KACZ/B,EAAAC,EAAAC,cAAA,wBAAiBC,KAAKU,MAAMkB,KAAKO,qBAAjC,KACAtC,EAAAC,EAAAC,cAAA,wBAAgBC,KAAKU,MAAMkB,KAAKQ,sBAEhCvC,EAAAC,EAAAC,cAACsC,EAAD,CAAST,KAAM5B,KAAKU,MAAMkB,KAAKQ,+BA/B1BxC,aCkFL0C,cAlFX,SAAAA,EAAYrC,GAAO,IAAAG,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAL,KAAAsC,IACflC,EAAAC,OAAAE,EAAA,EAAAF,CAAAL,KAAAK,OAAAG,EAAA,EAAAH,CAAAiC,GAAA7B,KAAAT,KAAMC,KACDS,MAAQ,CACT6B,YAAY,EACZC,IAAK,iCAITpC,EAAKqC,YAAcrC,EAAKqC,YAAY5B,KAAjBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KARJA,oFAcfiB,QAAQC,IAAI,oFAKZD,QAAQC,IAAI,0EAIMoB,EAAWC,GAG7B,OADAtB,QAAQC,IAAI,0CACL,8CAGSoB,EAAUC,GAE1BtB,QAAQC,IAAI,uHAKZD,QAAQC,IAAI,wLAkBZ,GAJAD,QAAQC,IAAItB,KAAKU,OACjBV,KAAKmB,SAAS,SAACT,GAAD,MAAY,CACtB6B,YAAa7B,EAAM6B,cAEM,GAAzBvC,KAAKU,MAAM6B,WACf,CACI,IAAIK,EAAI,MACR5C,KAAKmB,SAAS,CACVqB,IAAK,wDAKTI,EAAI,KACJ5C,KAAKmB,SAAS,CACVqB,IAAK,qDAGbvB,MAAM,eAAiB2B,oCAIvB,OACG/C,EAAAC,EAAAC,cAAA,WACKF,EAAAC,EAAAC,cAAA,UAAQ0B,UAAU,kBAAkBC,QAAW1B,KAAKyC,aAApD,IAAoEzC,KAAKU,MAAM6B,WAAa,MAAQ,KAApG,KACA1C,EAAAC,EAAAC,cAAA,SAAIC,KAAKU,MAAM8B,KACf3C,EAAAC,EAAAC,cAAA,kCAA0BC,KAAKU,MAAM6B,WAAa,KAAO,eA7EpDM,IAAMjD,WCsCZkD,mLAlBX,OACEjD,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,aACb5B,EAAAC,EAAAC,cAACgD,EAAD,CAAI7C,KAAK,4BAA2BL,EAAAC,EAAAC,cAACiD,EAAD,CAAOpB,KAAK,4EAChD/B,EAAAC,EAAAC,cAACgD,EAAD,CAAI7C,KAAK,qCAKTL,EAAAC,EAAAC,cAACgD,EAAD,CAAI7C,KAAK,gCACTL,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAACmD,EAAD,CAAQlC,MAAM,iBAxBJpB,aCEEuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.82ba103b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Check from \"./Checkbox\";\nclass H1 extends Component {\n    render() {\n        return (            \n            <h1>\n               {this.props.text}                \n            </h1>\n\n        );\n    }\n}\n\nexport default H1;","import React, { Component } from 'react';\n\nclass Checkbox extends Component {\n  \n    render() {\n        return (\n            <span>\n                <input type = \"checkbox\" time={this.props.time} value = {this.props.value}/>{this.props.text}\n            </span>\n        );\n    }\n}\n\nexport default Checkbox;","import React, { Component } from 'react';\n\nclass Button extends Component {\n     constructor(props) {\n         super(props);\n         this.state = {\n            //  isToggleOn: true,\n             name: []\n         };\n\n         // This binding is necessary to make `this` work in the callback\n         this.saveName = this.saveName.bind(this);\n     }\n\n     saveName()\n     {\n        if(this.refs.name.value == \"\")\n        {\n            alert(\"Please enter your name\")\n        }\n        else\n        {\n            var entered_val = this.refs.name.value;\n            this.setState(state =>({\n                name: state.name.concat(entered_val)\n            }))\n            console.log(entered_val);\n        }\n     }\n\n    render() {\n        return (          \n                <div>\n                    <input type=\"text\" ref=\"name\" className=\"col-md-6 form-group\" />\n                    <br></br>\n                    <button className = \"btn btn-primary\" onClick={this.saveName} > {this.props.value} </button>\n                    <p>You entered : {this.state.name}</p>            \n                </div>\n        );\n    }\n}\n\nexport default Button;","import React, { Component } from 'react';\n\nclass TimeBox extends Component {\n    render() {\n        return (\n            <div className=\"timeBox\">\n               Time:  {this.props.time}\n            </div>\n        );\n    }\n}\n\nexport default TimeBox; ","import React, { Component } from 'react';\n//import CheckBox from \"./Checkbox\";\nimport TimeBox from \"./TimeBox\";\n\nclass Clock extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {time : new Date()}\n    }\n\n    //life cycle methods\n    componentDidMount()\n    {\n        setInterval(() => this.setState({\n           time: new Date()\n       }), 1000);\n    }\n\n    componentWillUnmount()\n    {\n        clearInterval(this.timeID);\n    }\n\n    tick()\n    {\n       \n    }\n    render() {\n        return (\n            <div>\n               {this.props.time}\n               <strong > Date: {this.state.time.toLocaleDateString()} </strong>\n               <strong> Time: {this.state.time.toLocaleTimeString()}</strong>\n               {/* <CheckBox value=\"1\" text=\"render other component here\" /> */}              \n               <TimeBox time={this.state.time.toLocaleTimeString()}  />\n           </div>\n\n        );\n    }\n}\n\n\nexport default Clock;","import React, {Component} from 'react';\n\n\nclass Toggle extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isToggleOn: true,\n            msg: \"Operate fan from above button\"\n        };\n\n        // This binding is necessary to make `this` work in the callback\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    //life cylcles methods of component\n    componentWillMount()\n    {\n        console.log(\"component will going to mount/render\");\n    }\n    \n    componentDidMount()\n    {\n        console.log(\"component mounted/called\");\n    }\n    \n    \n    shouldComponentUpdate(nextProps, nextState)\n    {\n        console.log(\"should component update method called\");\n        return true;\n    }\n\n    componentWillUpdate(nextProps,nextState)\n    {\n        console.log(\"toggle comoponent receive new state so componentWillUpdate method call\")\n    }\n    \n    componentDidUpdate()\n    {\n        console.log(\"component updated on DOM so now componentDidUpdate is call.\");\n    }\n\n    componentWillUnmount()\n    {\n        //this.unMount();\n    }\n\n    unMount()\n    {\n\n    }\n    \n    handleClick() {\n        console.log(this.state)\n        this.setState((state) => ({            \n            isToggleOn: !state.isToggleOn\n        }));\n        if (this.state.isToggleOn == true)\n        {\n            var x = \"OFF\";\n            this.setState({\n                msg: \"Fan is turned off. Click above to turned it ON\",\n            });\n        }\n        else\n        {\n            x = \"ON\";\n            this.setState({\n                msg: \"Fan is turned ON now. Click above to make it OFF\",\n            })\n        }\n        alert(\"fan will be \" + x)\n    }\n\n    render() {\n        return (\n           <div>\n                <button className=\"btn btn-success\" onClick = {this.handleClick} > {this.state.isToggleOn ? 'OFF' : 'ON'} </button>\n                <p>{this.state.msg}</p>\n                <strong>Current Status : {this.state.isToggleOn ? 'ON' : 'OFF'}</strong>\n           </div>\n        );\n    }\n}\n\nexport default Toggle;\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport H1 from './components/H1'\nimport Checkbox from './components/Checkbox';\nimport Button from './components/Button';\nimport Clock from './components/Clock';\nimport Toggle from \"./components/Toggle\";\n//import Input from \"./components/Input\";\n\nclass App extends Component {\n  // constructor(props){\n  //   super(props);\n  //   this.state = {\n\n  //   };\n  // }\n\n  // function close123() {\n  //   alert(\"Unmount component\");\n  // }\n\n  render() {\n    return (\n      <div className=\"container\">                \n        <H1 text=\"Hello Devarsh via props\"/><Clock time=\"I am props.My right side is date & time which is comes from state value\" />\n        <H1 text=\"Hello User2 using same component\" />\n\n        {/* <Checkbox hobby=\"cricket\"/> */}\n\n        {/* <Button value=\"Submit\" /> */}\n        <H1 text=\"bellow is the toogle button\" /> \n        <Toggle />\n        <p>Enter your name bellow.</p>   \n        <Button value=\"Save\"/>    \n        {/* <button>Un Mount</button> */}\n      </div>\n    );   \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
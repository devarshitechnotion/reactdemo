{"version":3,"sources":["components/Checkbox.js","components/H1.js","components/Button.js","components/TimeBox.js","components/Clock.js","components/Toggle.js","App.js","serviceWorker.js","index.js"],"names":["Checkbox","react_default","a","createElement","type","time","this","props","value","text","Component","H1","Button","className","TimeBox","Clock","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","Date","_this2","setInterval","setState","clearInterval","timeID","toLocaleDateString","toLocaleTimeString","components_TimeBox","Toggle","isToggleOn","handleClick","bind","assertThisInitialized","x","alert","onClick","React","App","components_H1","components_Clock","components_Checkbox","hobby","components_Button","components_Toggle","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAaeA,0LARP,OACIC,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAOC,KAAO,WAAWC,KAAMC,KAAKC,MAAMF,KAAMG,MAASF,KAAKC,MAAMC,QAASF,KAAKC,MAAME,aALjFC,cCWRC,mLATP,OACIV,EAAAC,EAAAC,cAAA,UACIG,KAAKC,MAAME,aAJVC,aCQFE,mLANP,OACQX,EAAAC,EAAAC,cAAA,UAAQU,UAAY,mBAApB,IAAyCP,KAAKC,MAAMC,MAApD,YAHKE,aCUNI,mLARP,OACIb,EAAAC,EAAAC,cAAA,OAAKU,UAAU,WAAf,UACWP,KAAKC,MAAMF,aAJZK,aCyCPK,cAtCX,SAAAA,EAAYR,GACZ,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAX,KAAAS,IACIC,EAAAC,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAf,KAAMC,KACDe,MAAQ,CAACjB,KAAO,IAAIkB,MAF7BP,mFAOA,IAAAQ,EAAAlB,KACImB,YAAY,kBAAMD,EAAKE,SAAS,CAC7BrB,KAAM,IAAIkB,QACV,oDAKHI,cAAcrB,KAAKsB,yEAQnB,OACI3B,EAAAC,EAAAC,cAAA,WACIG,KAAKC,MAAMF,KACZJ,EAAAC,EAAAC,cAAA,wBAAiBG,KAAKgB,MAAMjB,KAAKwB,qBAAjC,KACA5B,EAAAC,EAAAC,cAAA,wBAAgBG,KAAKgB,MAAMjB,KAAKyB,sBAEhC7B,EAAAC,EAAAC,cAAC4B,EAAD,CAAS1B,KAAMC,KAAKgB,MAAMjB,KAAKyB,+BA/B1BpB,oBCgCLsB,cAhCX,SAAAA,EAAYzB,GAAO,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAX,KAAA0B,IACfhB,EAAAC,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAe,GAAAX,KAAAf,KAAMC,KACDe,MAAQ,CACTW,YAAY,GAIhBjB,EAAKkB,YAAclB,EAAKkB,YAAYC,KAAjBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KAPJA,6EAcf,GAHAV,KAAKoB,SAAS,SAAAJ,GAAK,MAAK,CACpBW,YAAaX,EAAMW,cAEM,GAAzB3B,KAAKgB,MAAMW,WAEX,IAAII,EAAI,UAIJA,EAAI,MAEZC,MAAM,aAAeD,oCAIrB,OACApC,EAAAC,EAAAC,cAAA,UAAQoC,QAAWjC,KAAK4B,aAAxB,IAAwC5B,KAAKgB,MAAMW,WAAa,KAAO,MAAvE,YA5BaO,IAAM9B,WCuBZ+B,mLAfX,OACExC,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAACuC,EAAD,CAAIjC,KAAK,4BAA2BR,EAAAC,EAAAC,cAACwC,EAAD,CAAOtC,KAAK,4EAChDJ,EAAAC,EAAAC,cAACuC,EAAD,CAAIjC,KAAK,qCAETR,EAAAC,EAAAC,cAACyC,EAAD,CAAUC,MAAM,YAEhB5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAQtC,MAAM,WACdP,EAAAC,EAAAC,cAACuC,EAAD,CAAIjC,KAAK,gCACTR,EAAAC,EAAAC,cAAC4C,EAAD,cAXUrC,aCGEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a3366b27.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Checkbox extends Component {\n  \n    render() {\n        return (\n            <span>\n                <input type = \"checkbox\" time={this.props.time} value = {this.props.value}/>{this.props.text}\n            </span>\n        );\n    }\n}\n\nexport default Checkbox;","import React, { Component } from 'react';\nimport Check from \"./Checkbox\";\nclass H1 extends Component {\n    render() {\n        return (            \n            <h1>\n               {this.props.text}                \n            </h1>\n\n        );\n    }\n}\n\nexport default H1;","import React, { Component } from 'react';\n\nclass Button extends Component {\n    render() {\n        return (          \n                <button className = \"btn btn-primary\" > {this.props.value} </button>            \n        );\n    }\n}\n\nexport default Button;","import React, { Component } from 'react';\n\nclass TimeBox extends Component {\n    render() {\n        return (\n            <div className=\"timeBox\">\n               Time:  {this.props.time}\n            </div>\n        );\n    }\n}\n\nexport default TimeBox; ","import React, { Component } from 'react';\nimport CheckBox from \"./Checkbox\";\nimport TimeBox from \"./TimeBox\";\n\nclass Clock extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {time : new Date()}\n    }\n\n    //life cycle methods\n    componentDidMount()\n    {\n        setInterval(() => this.setState({\n           time: new Date()\n       }), 1000);\n    }\n\n    componentWillUnmount()\n    {\n        clearInterval(this.timeID);\n    }\n\n    tick()\n    {\n       \n    }\n    render() {\n        return (\n            <div>\n               {this.props.time}\n               <strong > Date: {this.state.time.toLocaleDateString()} </strong>\n               <strong> Time: {this.state.time.toLocaleTimeString()}</strong>\n               {/* <CheckBox value=\"1\" text=\"render other component here\" /> */}              \n               <TimeBox time={this.state.time.toLocaleTimeString()}  />\n           </div>\n\n        );\n    }\n}\n\n\nexport default Clock;","import React, {Component} from 'react';\n\n\nclass Toggle extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isToggleOn: true\n        };\n\n        // This binding is necessary to make `this` work in the callback\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        this.setState(state => ({\n            isToggleOn: !state.isToggleOn\n        }));\n        if (this.state.isToggleOn == true)\n        {\n            var x = \"ON\"\n        }\n        else\n        {\n            var x = \"OFF\"\n        }\n        alert(\"switch is \" + x)\n    }\n\n    render() {\n        return ( \n        <button onClick = {this.handleClick} > {this.state.isToggleOn ? 'ON' : 'OFF'} </button>\n        );\n    }\n}\n\nexport default Toggle;\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport H1 from './components/H1'\nimport Checkbox from './components/Checkbox';\nimport Button from './components/Button';\nimport Clock from './components/Clock';\nimport Toggle from \"./components/Toggle\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">                \n        <H1 text=\"Hello Devarsh via props\"/><Clock time=\"I am props.My right side is date & time which is comes from state value\" />\n        <H1 text=\"Hello User2 using same component\" />\n\n        <Checkbox hobby=\"cricket\"/>\n\n        <Button value=\"Submit\" />\n        <H1 text=\"bellow is the toogle button\" />\n        <Toggle />\n      </div>\n    );   \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}